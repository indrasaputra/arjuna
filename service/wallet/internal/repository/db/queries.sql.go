// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const addWalletBalance = `-- name: AddWalletBalance :exec

UPDATE wallets SET balance = balance + $2 WHERE id = $1
`

type AddWalletBalanceParams struct {
	Amount decimal.Decimal
	ID     uuid.UUID
}

// noqa
func (q *Queries) AddWalletBalance(ctx context.Context, arg AddWalletBalanceParams) error {
	_, err := q.db.Exec(ctx, addWalletBalance, arg.ID, arg.Amount)
	return err
}

const createWallet = `-- name: CreateWallet :exec
INSERT INTO wallets (id, user_id, balance, created_at, updated_at, created_by, updated_by)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateWalletParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	Balance   decimal.Decimal
	ID        uuid.UUID
	UserID    uuid.UUID
	CreatedBy uuid.UUID
	UpdatedBy uuid.UUID
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) error {
	_, err := q.db.Exec(ctx, createWallet,
		arg.ID,
		arg.UserID,
		arg.Balance,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	return err
}

const getUserWalletForUpdate = `-- name: GetUserWalletForUpdate :one
SELECT id, user_id, balance, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM wallets WHERE id = $1 AND user_id = $2 LIMIT 1 FOR NO KEY UPDATE
`

type GetUserWalletForUpdateParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetUserWalletForUpdate(ctx context.Context, arg GetUserWalletForUpdateParams) (*Wallet, error) {
	row := q.db.QueryRow(ctx, getUserWalletForUpdate, arg.ID, arg.UserID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return &i, err
}
