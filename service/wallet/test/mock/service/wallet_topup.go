// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/wallet/internal/service/wallet_topup.go
//
// Generated by this command:
//
//	mockgen -source=./service/wallet/internal/service/wallet_topup.go -destination=./service/wallet/test/mock//service/wallet_topup.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"

	entity "github.com/indrasaputra/arjuna/service/wallet/entity"
)

// MockTopupWallet is a mock of TopupWallet interface.
type MockTopupWallet struct {
	ctrl     *gomock.Controller
	recorder *MockTopupWalletMockRecorder
}

// MockTopupWalletMockRecorder is the mock recorder for MockTopupWallet.
type MockTopupWalletMockRecorder struct {
	mock *MockTopupWallet
}

// NewMockTopupWallet creates a new mock instance.
func NewMockTopupWallet(ctrl *gomock.Controller) *MockTopupWallet {
	mock := &MockTopupWallet{ctrl: ctrl}
	mock.recorder = &MockTopupWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupWallet) EXPECT() *MockTopupWalletMockRecorder {
	return m.recorder
}

// Topup mocks base method.
func (m *MockTopupWallet) Topup(ctx context.Context, topup *entity.TopupWallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topup", ctx, topup)
	ret0, _ := ret[0].(error)
	return ret0
}

// Topup indicates an expected call of Topup.
func (mr *MockTopupWalletMockRecorder) Topup(ctx, topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topup", reflect.TypeOf((*MockTopupWallet)(nil).Topup), ctx, topup)
}

// MockTopupWalletRepository is a mock of TopupWalletRepository interface.
type MockTopupWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTopupWalletRepositoryMockRecorder
}

// MockTopupWalletRepositoryMockRecorder is the mock recorder for MockTopupWalletRepository.
type MockTopupWalletRepositoryMockRecorder struct {
	mock *MockTopupWalletRepository
}

// NewMockTopupWalletRepository creates a new mock instance.
func NewMockTopupWalletRepository(ctrl *gomock.Controller) *MockTopupWalletRepository {
	mock := &MockTopupWalletRepository{ctrl: ctrl}
	mock.recorder = &MockTopupWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupWalletRepository) EXPECT() *MockTopupWalletRepositoryMockRecorder {
	return m.recorder
}

// AddWalletBalance mocks base method.
func (m *MockTopupWalletRepository) AddWalletBalance(ctx context.Context, id uuid.UUID, amount decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWalletBalance", ctx, id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWalletBalance indicates an expected call of AddWalletBalance.
func (mr *MockTopupWalletRepositoryMockRecorder) AddWalletBalance(ctx, id, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWalletBalance", reflect.TypeOf((*MockTopupWalletRepository)(nil).AddWalletBalance), ctx, id, amount)
}

// MockIdempotencyKeyRepository is a mock of IdempotencyKeyRepository interface.
type MockIdempotencyKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyKeyRepositoryMockRecorder
}

// MockIdempotencyKeyRepositoryMockRecorder is the mock recorder for MockIdempotencyKeyRepository.
type MockIdempotencyKeyRepositoryMockRecorder struct {
	mock *MockIdempotencyKeyRepository
}

// NewMockIdempotencyKeyRepository creates a new mock instance.
func NewMockIdempotencyKeyRepository(ctrl *gomock.Controller) *MockIdempotencyKeyRepository {
	mock := &MockIdempotencyKeyRepository{ctrl: ctrl}
	mock.recorder = &MockIdempotencyKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotencyKeyRepository) EXPECT() *MockIdempotencyKeyRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockIdempotencyKeyRepository) Exists(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIdempotencyKeyRepositoryMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIdempotencyKeyRepository)(nil).Exists), ctx, key)
}
