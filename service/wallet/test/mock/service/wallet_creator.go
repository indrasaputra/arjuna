// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/wallet/internal/service/wallet_creator.go
//
// Generated by this command:
//
//	mockgen -source=./service/wallet/internal/service/wallet_creator.go -destination=./service/wallet/test/mock//service/wallet_creator.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "github.com/indrasaputra/arjuna/service/wallet/entity"
)

// MockCreateWallet is a mock of CreateWallet interface.
type MockCreateWallet struct {
	ctrl     *gomock.Controller
	recorder *MockCreateWalletMockRecorder
}

// MockCreateWalletMockRecorder is the mock recorder for MockCreateWallet.
type MockCreateWalletMockRecorder struct {
	mock *MockCreateWallet
}

// NewMockCreateWallet creates a new mock instance.
func NewMockCreateWallet(ctrl *gomock.Controller) *MockCreateWallet {
	mock := &MockCreateWallet{ctrl: ctrl}
	mock.recorder = &MockCreateWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateWallet) EXPECT() *MockCreateWalletMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreateWallet) Create(ctx context.Context, wallet *entity.Wallet, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, wallet, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCreateWalletMockRecorder) Create(ctx, wallet, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateWallet)(nil).Create), ctx, wallet, key)
}

// MockIdempotencyKeyRepository is a mock of IdempotencyKeyRepository interface.
type MockIdempotencyKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyKeyRepositoryMockRecorder
}

// MockIdempotencyKeyRepositoryMockRecorder is the mock recorder for MockIdempotencyKeyRepository.
type MockIdempotencyKeyRepositoryMockRecorder struct {
	mock *MockIdempotencyKeyRepository
}

// NewMockIdempotencyKeyRepository creates a new mock instance.
func NewMockIdempotencyKeyRepository(ctrl *gomock.Controller) *MockIdempotencyKeyRepository {
	mock := &MockIdempotencyKeyRepository{ctrl: ctrl}
	mock.recorder = &MockIdempotencyKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotencyKeyRepository) EXPECT() *MockIdempotencyKeyRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockIdempotencyKeyRepository) Exists(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIdempotencyKeyRepositoryMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIdempotencyKeyRepository)(nil).Exists), ctx, key)
}

// MockCreateWalletRepository is a mock of CreateWalletRepository interface.
type MockCreateWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateWalletRepositoryMockRecorder
}

// MockCreateWalletRepositoryMockRecorder is the mock recorder for MockCreateWalletRepository.
type MockCreateWalletRepositoryMockRecorder struct {
	mock *MockCreateWalletRepository
}

// NewMockCreateWalletRepository creates a new mock instance.
func NewMockCreateWalletRepository(ctrl *gomock.Controller) *MockCreateWalletRepository {
	mock := &MockCreateWalletRepository{ctrl: ctrl}
	mock.recorder = &MockCreateWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateWalletRepository) EXPECT() *MockCreateWalletRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockCreateWalletRepository) Insert(ctx context.Context, wallet *entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCreateWalletRepositoryMockRecorder) Insert(ctx, wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCreateWalletRepository)(nil).Insert), ctx, wallet)
}
