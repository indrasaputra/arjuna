// user.proto defines service for user.
syntax = "proto3";

package api.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/indrasaputra/arjuna/user/api/v1;apiv1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "User API",
    version : "1.0.0",
    contact : {
      name : "Indra Saputra",
      url : "https://github.com/indrasaputra",
    },
    license : {
      name : "BSD 3-Clause License",
      url : "https://github.com/indrasaputra/arjuna/blob/main/LICENSE",
    },
  },
  host : "localhost:8000",
  schemes : HTTP,
  consumes : "application/json",
  produces : "application/json",
};

// UserCommandService provides state-change service for user.
service UserCommandService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description : "This service provides basic command or state-changing use cases to work with "
                  "user."
                  "A user is represented by an email as its unique identifier."
  };

  // Register a new user.
  //
  // This endpoint registers a new user.
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {
    option (google.api.http) = {
      post : "/v1/users/register",
      body : "user"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id : "RegisterUser",
      tags : "User"
    };
  };
}

// RegisterUserRequest represents request for register user.
message RegisterUserRequest {
  // user represents user data.
  User user = 1;
}

// RegisterUserResponse represents response from register user.
message RegisterUserResponse {
  // data represents user.
  User data = 1;
}

// User represents a user data.
message User {
  // id represents a user's id.
  string id = 1 [ (google.api.field_behavior) = OUTPUT_ONLY ];

  // email represents a user's email.
  string email = 2 [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    required : "email",
    description : "user's email",
    pattern : "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
    example : "\"email@company.com\"",
  } ];

  // password represents the user's password.
  string password = 3 [
    (google.api.field_behavior) = INPUT_ONLY,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "user's password",
      format : "string",
    }
  ];

  // name represents a user's name.
  string name = 4 [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "user's name",
    min_length : 1,
    max_length : 255,
    example : "\"Zlatan Ibrahimovic\"",
  } ];

  // created_at represents when the user was registered.
  google.protobuf.Timestamp created_at = 5 [ (google.api.field_behavior) = OUTPUT_ONLY ];
  // updated_at represents when the user was last updated.
  google.protobuf.Timestamp updated_at = 6 [ (google.api.field_behavior) = OUTPUT_ONLY ];
}

// UserError represents message for any error happening in user.
message UserError {
  // error_code represents specific and unique error code for user.
  UserErrorCode error_code = 1;
}

// UserErrorCode enumerates user error code.
enum UserErrorCode {
  // Default enum code according to
  // https://medium.com/@akhaku/protobuf-definition-best-practices-87f281576f31.
  USER_ERROR_CODE_UNSPECIFIED = 0;

  // Unexpected behavior occured in system.
  USER_ERROR_CODE_INTERNAL = 1;

  // User instance is empty or nil.
  USER_ERROR_CODE_EMPTY_USER = 2;

  // User already exists.
  // The uniqueness of a user is represented by email.
  USER_ERROR_CODE_ALREADY_EXISTS = 3;

  // User's name is invalid.
  // Allowed characters are alphabet only.
  USER_ERROR_CODE_INVALID_NAME = 4;

  // User's email is invalid.
  USER_ERROR_CODE_INVALID_EMAIL = 5;
}
