// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/user/internal/orchestration/temporal/activity/user_registrar.go

// Package mock_activity is a generated GoMock package.
package mock_activity

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/arjuna/service/user/entity"
)

// MockRegisterUserVendor is a mock of RegisterUserVendor interface.
type MockRegisterUserVendor struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserVendorMockRecorder
}

// MockRegisterUserVendorMockRecorder is the mock recorder for MockRegisterUserVendor.
type MockRegisterUserVendorMockRecorder struct {
	mock *MockRegisterUserVendor
}

// NewMockRegisterUserVendor creates a new mock instance.
func NewMockRegisterUserVendor(ctrl *gomock.Controller) *MockRegisterUserVendor {
	mock := &MockRegisterUserVendor{ctrl: ctrl}
	mock.recorder = &MockRegisterUserVendorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUserVendor) EXPECT() *MockRegisterUserVendorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRegisterUserVendor) Create(ctx context.Context, user *entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRegisterUserVendorMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegisterUserVendor)(nil).Create), ctx, user)
}

// HardDelete mocks base method.
func (m *MockRegisterUserVendor) HardDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDelete indicates an expected call of HardDelete.
func (mr *MockRegisterUserVendorMockRecorder) HardDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDelete", reflect.TypeOf((*MockRegisterUserVendor)(nil).HardDelete), ctx, id)
}

// MockRegisterUserDatabase is a mock of RegisterUserDatabase interface.
type MockRegisterUserDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserDatabaseMockRecorder
}

// MockRegisterUserDatabaseMockRecorder is the mock recorder for MockRegisterUserDatabase.
type MockRegisterUserDatabaseMockRecorder struct {
	mock *MockRegisterUserDatabase
}

// NewMockRegisterUserDatabase creates a new mock instance.
func NewMockRegisterUserDatabase(ctrl *gomock.Controller) *MockRegisterUserDatabase {
	mock := &MockRegisterUserDatabase{ctrl: ctrl}
	mock.recorder = &MockRegisterUserDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUserDatabase) EXPECT() *MockRegisterUserDatabaseMockRecorder {
	return m.recorder
}

// UpdateKeycloakID mocks base method.
func (m *MockRegisterUserDatabase) UpdateKeycloakID(ctx context.Context, id, keycloakID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeycloakID", ctx, id, keycloakID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKeycloakID indicates an expected call of UpdateKeycloakID.
func (mr *MockRegisterUserDatabaseMockRecorder) UpdateKeycloakID(ctx, id, keycloakID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeycloakID", reflect.TypeOf((*MockRegisterUserDatabase)(nil).UpdateKeycloakID), ctx, id, keycloakID)
}
