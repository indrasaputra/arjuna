// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/user/internal/orchestration/temporal/activity/user_registrar.go
//
// Generated by this command:
//
//	mockgen -source=./service/user/internal/orchestration/temporal/activity/user_registrar.go -destination=./service/user/test/mock//orchestration/temporal/activity/user_registrar.go
//

// Package mock_activity is a generated GoMock package.
package mock_activity

import (
	context "context"
	reflect "reflect"

	entity "github.com/indrasaputra/arjuna/service/user/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRegisterUserAuthConnection is a mock of RegisterUserAuthConnection interface.
type MockRegisterUserAuthConnection struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserAuthConnectionMockRecorder
}

// MockRegisterUserAuthConnectionMockRecorder is the mock recorder for MockRegisterUserAuthConnection.
type MockRegisterUserAuthConnectionMockRecorder struct {
	mock *MockRegisterUserAuthConnection
}

// NewMockRegisterUserAuthConnection creates a new mock instance.
func NewMockRegisterUserAuthConnection(ctrl *gomock.Controller) *MockRegisterUserAuthConnection {
	mock := &MockRegisterUserAuthConnection{ctrl: ctrl}
	mock.recorder = &MockRegisterUserAuthConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUserAuthConnection) EXPECT() *MockRegisterUserAuthConnectionMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockRegisterUserAuthConnection) CreateAccount(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockRegisterUserAuthConnectionMockRecorder) CreateAccount(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockRegisterUserAuthConnection)(nil).CreateAccount), ctx, user)
}

// MockRegisterUserWalletConnection is a mock of RegisterUserWalletConnection interface.
type MockRegisterUserWalletConnection struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserWalletConnectionMockRecorder
}

// MockRegisterUserWalletConnectionMockRecorder is the mock recorder for MockRegisterUserWalletConnection.
type MockRegisterUserWalletConnectionMockRecorder struct {
	mock *MockRegisterUserWalletConnection
}

// NewMockRegisterUserWalletConnection creates a new mock instance.
func NewMockRegisterUserWalletConnection(ctrl *gomock.Controller) *MockRegisterUserWalletConnection {
	mock := &MockRegisterUserWalletConnection{ctrl: ctrl}
	mock.recorder = &MockRegisterUserWalletConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUserWalletConnection) EXPECT() *MockRegisterUserWalletConnectionMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockRegisterUserWalletConnection) CreateWallet(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockRegisterUserWalletConnectionMockRecorder) CreateWallet(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockRegisterUserWalletConnection)(nil).CreateWallet), ctx, user)
}

// MockRegisterUserDatabase is a mock of RegisterUserDatabase interface.
type MockRegisterUserDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserDatabaseMockRecorder
}

// MockRegisterUserDatabaseMockRecorder is the mock recorder for MockRegisterUserDatabase.
type MockRegisterUserDatabaseMockRecorder struct {
	mock *MockRegisterUserDatabase
}

// NewMockRegisterUserDatabase creates a new mock instance.
func NewMockRegisterUserDatabase(ctrl *gomock.Controller) *MockRegisterUserDatabase {
	mock := &MockRegisterUserDatabase{ctrl: ctrl}
	mock.recorder = &MockRegisterUserDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUserDatabase) EXPECT() *MockRegisterUserDatabaseMockRecorder {
	return m.recorder
}

// HardDelete mocks base method.
func (m *MockRegisterUserDatabase) HardDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDelete indicates an expected call of HardDelete.
func (mr *MockRegisterUserDatabaseMockRecorder) HardDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDelete", reflect.TypeOf((*MockRegisterUserDatabase)(nil).HardDelete), ctx, id)
}
