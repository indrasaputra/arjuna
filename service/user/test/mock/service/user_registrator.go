// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/user/internal/service/user_registrator.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/arjuna/service/user/entity"
	service "github.com/indrasaputra/arjuna/service/user/internal/service"
)

// MockRegisterUser is a mock of RegisterUser interface.
type MockRegisterUser struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserMockRecorder
}

// MockRegisterUserMockRecorder is the mock recorder for MockRegisterUser.
type MockRegisterUserMockRecorder struct {
	mock *MockRegisterUser
}

// NewMockRegisterUser creates a new mock instance.
func NewMockRegisterUser(ctrl *gomock.Controller) *MockRegisterUser {
	mock := &MockRegisterUser{ctrl: ctrl}
	mock.recorder = &MockRegisterUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUser) EXPECT() *MockRegisterUserMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterUser) Register(ctx context.Context, user *entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegisterUserMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterUser)(nil).Register), ctx, user)
}

// MockRegisterUserWorkflow is a mock of RegisterUserWorkflow interface.
type MockRegisterUserWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserWorkflowMockRecorder
}

// MockRegisterUserWorkflowMockRecorder is the mock recorder for MockRegisterUserWorkflow.
type MockRegisterUserWorkflowMockRecorder struct {
	mock *MockRegisterUserWorkflow
}

// NewMockRegisterUserWorkflow creates a new mock instance.
func NewMockRegisterUserWorkflow(ctrl *gomock.Controller) *MockRegisterUserWorkflow {
	mock := &MockRegisterUserWorkflow{ctrl: ctrl}
	mock.recorder = &MockRegisterUserWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUserWorkflow) EXPECT() *MockRegisterUserWorkflowMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockRegisterUserWorkflow) RegisterUser(ctx context.Context, input *service.RegisterUserInput) (*service.RegisterUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, input)
	ret0, _ := ret[0].(*service.RegisterUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockRegisterUserWorkflowMockRecorder) RegisterUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockRegisterUserWorkflow)(nil).RegisterUser), ctx, input)
}
