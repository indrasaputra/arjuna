// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/user/internal/service/user_deleter.go
//
// Generated by this command:
//
//	mockgen -source=./service/user/internal/service/user_deleter.go -destination=./service/user/test/mock//service/user_deleter.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDeleteUser is a mock of DeleteUser interface.
type MockDeleteUser struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteUserMockRecorder
}

// MockDeleteUserMockRecorder is the mock recorder for MockDeleteUser.
type MockDeleteUserMockRecorder struct {
	mock *MockDeleteUser
}

// NewMockDeleteUser creates a new mock instance.
func NewMockDeleteUser(ctrl *gomock.Controller) *MockDeleteUser {
	mock := &MockDeleteUser{ctrl: ctrl}
	mock.recorder = &MockDeleteUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteUser) EXPECT() *MockDeleteUserMockRecorder {
	return m.recorder
}

// HardDelete mocks base method.
func (m *MockDeleteUser) HardDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDelete indicates an expected call of HardDelete.
func (mr *MockDeleteUserMockRecorder) HardDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDelete", reflect.TypeOf((*MockDeleteUser)(nil).HardDelete), ctx, id)
}

// MockDeleteUserRepository is a mock of DeleteUserRepository interface.
type MockDeleteUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteUserRepositoryMockRecorder
}

// MockDeleteUserRepositoryMockRecorder is the mock recorder for MockDeleteUserRepository.
type MockDeleteUserRepositoryMockRecorder struct {
	mock *MockDeleteUserRepository
}

// NewMockDeleteUserRepository creates a new mock instance.
func NewMockDeleteUserRepository(ctrl *gomock.Controller) *MockDeleteUserRepository {
	mock := &MockDeleteUserRepository{ctrl: ctrl}
	mock.recorder = &MockDeleteUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteUserRepository) EXPECT() *MockDeleteUserRepositoryMockRecorder {
	return m.recorder
}

// HardDelete mocks base method.
func (m *MockDeleteUserRepository) HardDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDelete indicates an expected call of HardDelete.
func (mr *MockDeleteUserRepositoryMockRecorder) HardDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDelete", reflect.TypeOf((*MockDeleteUserRepository)(nil).HardDelete), ctx, id)
}
