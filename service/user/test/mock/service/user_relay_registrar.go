// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/user/internal/service/user_relay_registrar.go
//
// Generated by this command:
//
//	mockgen -source=./service/user/internal/service/user_relay_registrar.go -destination=./service/user/test/mock//service/user_relay_registrar.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	entity "github.com/indrasaputra/arjuna/service/user/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRelayRegisterUser is a mock of RelayRegisterUser interface.
type MockRelayRegisterUser struct {
	ctrl     *gomock.Controller
	recorder *MockRelayRegisterUserMockRecorder
}

// MockRelayRegisterUserMockRecorder is the mock recorder for MockRelayRegisterUser.
type MockRelayRegisterUserMockRecorder struct {
	mock *MockRelayRegisterUser
}

// NewMockRelayRegisterUser creates a new mock instance.
func NewMockRelayRegisterUser(ctrl *gomock.Controller) *MockRelayRegisterUser {
	mock := &MockRelayRegisterUser{ctrl: ctrl}
	mock.recorder = &MockRelayRegisterUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayRegisterUser) EXPECT() *MockRelayRegisterUserMockRecorder {
	return m.recorder
}

// RelayRegister mocks base method.
func (m *MockRelayRegisterUser) RelayRegister(ctx context.Context, user *entity.UserOutbox) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayRegister", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelayRegister indicates an expected call of RelayRegister.
func (mr *MockRelayRegisterUserMockRecorder) RelayRegister(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayRegister", reflect.TypeOf((*MockRelayRegisterUser)(nil).RelayRegister), ctx, user)
}

// MockRelayRegisterUserOrchestration is a mock of RelayRegisterUserOrchestration interface.
type MockRelayRegisterUserOrchestration struct {
	ctrl     *gomock.Controller
	recorder *MockRelayRegisterUserOrchestrationMockRecorder
}

// MockRelayRegisterUserOrchestrationMockRecorder is the mock recorder for MockRelayRegisterUserOrchestration.
type MockRelayRegisterUserOrchestrationMockRecorder struct {
	mock *MockRelayRegisterUserOrchestration
}

// NewMockRelayRegisterUserOrchestration creates a new mock instance.
func NewMockRelayRegisterUserOrchestration(ctrl *gomock.Controller) *MockRelayRegisterUserOrchestration {
	mock := &MockRelayRegisterUserOrchestration{ctrl: ctrl}
	mock.recorder = &MockRelayRegisterUserOrchestrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayRegisterUserOrchestration) EXPECT() *MockRelayRegisterUserOrchestrationMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockRelayRegisterUserOrchestration) RegisterUser(ctx context.Context, input *entity.RegisterUserInput) (*entity.RegisterUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, input)
	ret0, _ := ret[0].(*entity.RegisterUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockRelayRegisterUserOrchestrationMockRecorder) RegisterUser(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockRelayRegisterUserOrchestration)(nil).RegisterUser), ctx, input)
}

// MockRelayRegisterUserOutboxRepository is a mock of RelayRegisterUserOutboxRepository interface.
type MockRelayRegisterUserOutboxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRelayRegisterUserOutboxRepositoryMockRecorder
}

// MockRelayRegisterUserOutboxRepositoryMockRecorder is the mock recorder for MockRelayRegisterUserOutboxRepository.
type MockRelayRegisterUserOutboxRepositoryMockRecorder struct {
	mock *MockRelayRegisterUserOutboxRepository
}

// NewMockRelayRegisterUserOutboxRepository creates a new mock instance.
func NewMockRelayRegisterUserOutboxRepository(ctrl *gomock.Controller) *MockRelayRegisterUserOutboxRepository {
	mock := &MockRelayRegisterUserOutboxRepository{ctrl: ctrl}
	mock.recorder = &MockRelayRegisterUserOutboxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayRegisterUserOutboxRepository) EXPECT() *MockRelayRegisterUserOutboxRepositoryMockRecorder {
	return m.recorder
}

// GetAllReady mocks base method.
func (m *MockRelayRegisterUserOutboxRepository) GetAllReady(ctx context.Context, limit uint) ([]*entity.UserOutbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReady", ctx, limit)
	ret0, _ := ret[0].([]*entity.UserOutbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReady indicates an expected call of GetAllReady.
func (mr *MockRelayRegisterUserOutboxRepositoryMockRecorder) GetAllReady(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReady", reflect.TypeOf((*MockRelayRegisterUserOutboxRepository)(nil).GetAllReady), ctx, limit)
}

// SetDelivered mocks base method.
func (m *MockRelayRegisterUserOutboxRepository) SetDelivered(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDelivered", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDelivered indicates an expected call of SetDelivered.
func (mr *MockRelayRegisterUserOutboxRepositoryMockRecorder) SetDelivered(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDelivered", reflect.TypeOf((*MockRelayRegisterUserOutboxRepository)(nil).SetDelivered), ctx, id)
}

// SetFailed mocks base method.
func (m *MockRelayRegisterUserOutboxRepository) SetFailed(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFailed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFailed indicates an expected call of SetFailed.
func (mr *MockRelayRegisterUserOutboxRepositoryMockRecorder) SetFailed(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFailed", reflect.TypeOf((*MockRelayRegisterUserOutboxRepository)(nil).SetFailed), ctx, id)
}

// SetProcessed mocks base method.
func (m *MockRelayRegisterUserOutboxRepository) SetProcessed(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProcessed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProcessed indicates an expected call of SetProcessed.
func (mr *MockRelayRegisterUserOutboxRepositoryMockRecorder) SetProcessed(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProcessed", reflect.TypeOf((*MockRelayRegisterUserOutboxRepository)(nil).SetProcessed), ctx, id)
}
