// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/user/internal/service/user_getter.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/arjuna/service/user/entity"
)

// MockGetUser is a mock of GetUser interface.
type MockGetUser struct {
	ctrl     *gomock.Controller
	recorder *MockGetUserMockRecorder
}

// MockGetUserMockRecorder is the mock recorder for MockGetUser.
type MockGetUserMockRecorder struct {
	mock *MockGetUser
}

// NewMockGetUser creates a new mock instance.
func NewMockGetUser(ctrl *gomock.Controller) *MockGetUser {
	mock := &MockGetUser{ctrl: ctrl}
	mock.recorder = &MockGetUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUser) EXPECT() *MockGetUserMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockGetUser) GetAll(ctx context.Context, limit uint) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, limit)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGetUserMockRecorder) GetAll(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetUser)(nil).GetAll), ctx, limit)
}

// MockGetUserRepository is a mock of GetUserRepository interface.
type MockGetUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetUserRepositoryMockRecorder
}

// MockGetUserRepositoryMockRecorder is the mock recorder for MockGetUserRepository.
type MockGetUserRepositoryMockRecorder struct {
	mock *MockGetUserRepository
}

// NewMockGetUserRepository creates a new mock instance.
func NewMockGetUserRepository(ctrl *gomock.Controller) *MockGetUserRepository {
	mock := &MockGetUserRepository{ctrl: ctrl}
	mock.recorder = &MockGetUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUserRepository) EXPECT() *MockGetUserRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockGetUserRepository) GetAll(ctx context.Context, limit uint) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, limit)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGetUserRepositoryMockRecorder) GetAll(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetUserRepository)(nil).GetAll), ctx, limit)
}
