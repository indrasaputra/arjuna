// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/user/internal/service/user_registrar.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	uow "github.com/indrasaputra/arjuna/pkg/sdk/uow"
	entity "github.com/indrasaputra/arjuna/service/user/entity"
)

// MockRegisterUser is a mock of RegisterUser interface.
type MockRegisterUser struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserMockRecorder
}

// MockRegisterUserMockRecorder is the mock recorder for MockRegisterUser.
type MockRegisterUserMockRecorder struct {
	mock *MockRegisterUser
}

// NewMockRegisterUser creates a new mock instance.
func NewMockRegisterUser(ctrl *gomock.Controller) *MockRegisterUser {
	mock := &MockRegisterUser{ctrl: ctrl}
	mock.recorder = &MockRegisterUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUser) EXPECT() *MockRegisterUserMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterUser) Register(ctx context.Context, user *entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegisterUserMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterUser)(nil).Register), ctx, user)
}

// MockRegisterUserRepository is a mock of RegisterUserRepository interface.
type MockRegisterUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserRepositoryMockRecorder
}

// MockRegisterUserRepositoryMockRecorder is the mock recorder for MockRegisterUserRepository.
type MockRegisterUserRepositoryMockRecorder struct {
	mock *MockRegisterUserRepository
}

// NewMockRegisterUserRepository creates a new mock instance.
func NewMockRegisterUserRepository(ctrl *gomock.Controller) *MockRegisterUserRepository {
	mock := &MockRegisterUserRepository{ctrl: ctrl}
	mock.recorder = &MockRegisterUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUserRepository) EXPECT() *MockRegisterUserRepositoryMockRecorder {
	return m.recorder
}

// InsertWithTx mocks base method.
func (m *MockRegisterUserRepository) InsertWithTx(ctx context.Context, tx uow.Tx, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWithTx", ctx, tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWithTx indicates an expected call of InsertWithTx.
func (mr *MockRegisterUserRepositoryMockRecorder) InsertWithTx(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWithTx", reflect.TypeOf((*MockRegisterUserRepository)(nil).InsertWithTx), ctx, tx, user)
}

// MockRegisterUserOutboxRepository is a mock of RegisterUserOutboxRepository interface.
type MockRegisterUserOutboxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserOutboxRepositoryMockRecorder
}

// MockRegisterUserOutboxRepositoryMockRecorder is the mock recorder for MockRegisterUserOutboxRepository.
type MockRegisterUserOutboxRepositoryMockRecorder struct {
	mock *MockRegisterUserOutboxRepository
}

// NewMockRegisterUserOutboxRepository creates a new mock instance.
func NewMockRegisterUserOutboxRepository(ctrl *gomock.Controller) *MockRegisterUserOutboxRepository {
	mock := &MockRegisterUserOutboxRepository{ctrl: ctrl}
	mock.recorder = &MockRegisterUserOutboxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUserOutboxRepository) EXPECT() *MockRegisterUserOutboxRepositoryMockRecorder {
	return m.recorder
}

// InsertWithTx mocks base method.
func (m *MockRegisterUserOutboxRepository) InsertWithTx(ctx context.Context, tx uow.Tx, payload *entity.UserOutbox) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWithTx", ctx, tx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWithTx indicates an expected call of InsertWithTx.
func (mr *MockRegisterUserOutboxRepositoryMockRecorder) InsertWithTx(ctx, tx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWithTx", reflect.TypeOf((*MockRegisterUserOutboxRepository)(nil).InsertWithTx), ctx, tx, payload)
}
