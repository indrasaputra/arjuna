x-default:
  &default
  networks:
    - arjuna

x-arjuna-backend-default:
  &arjuna-backend-default
  <<: *default
  logging:
    driver: json-file
    options:
      tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
  restart: on-failure

services:
  postgres:
    <<: *default
    image: postgres:14.6
    container_name: arjuna-postgres
    volumes:
      - ${PWD}/tool/database:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgrespassword
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 60s
      retries: 5
    profiles:
      - infra

  db-migrate:
    <<: *default
    image: migrate/migrate:v4.15.2
    container_name: arjuna-db-migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - $PWD:/app
    working_dir: /app
    entrypoint: [""]
    command: ["sh", "-c", "/app/tool/script/golang/migrate.sh"]
    profiles:
      - infra

  sqlpad:
    <<: *default
    image: sqlpad/sqlpad:6.10
    container_name: arjuna-sqlpad
    depends_on:
      - postgres
    environment:
      - SQLPAD_AUTH_DISABLED=true
      - SQLPAD_AUTH_DISABLED_DEFAULT_ROLE=admin
      - SQLPAD_DB_IN_MEMORY=true
      - SQLPAD_CONNECTIONS__auth_postgres__name=Postgres - Auth
      - SQLPAD_CONNECTIONS__auth_postgres__driver=postgres
      - SQLPAD_CONNECTIONS__auth_postgres__host=postgres
      - SQLPAD_CONNECTIONS__auth_postgres__port=5432
      - SQLPAD_CONNECTIONS__auth_postgres__database=arjuna_auth
      - SQLPAD_CONNECTIONS__auth_postgres__username=postgresuser
      - SQLPAD_CONNECTIONS__auth_postgres__password=postgrespassword
      - SQLPAD_CONNECTIONS__user_postgres__name=Postgres - User
      - SQLPAD_CONNECTIONS__user_postgres__driver=postgres
      - SQLPAD_CONNECTIONS__user_postgres__host=postgres
      - SQLPAD_CONNECTIONS__user_postgres__port=5432
      - SQLPAD_CONNECTIONS__user_postgres__database=arjuna_user
      - SQLPAD_CONNECTIONS__user_postgres__username=postgresuser
      - SQLPAD_CONNECTIONS__user_postgres__password=postgrespassword
    ports:
      - 3000:3000
    profiles:
      - infra

  redis:
    <<: *default
    image: redis:7.2-alpine
    container_name: arjuna-redis
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 60s
      retries: 5

  elasticsearch:
    <<: *default
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.8
    container_name: arjuna-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    ports:
      - 9200:9200
    profiles:
      - infra

  temporal:
    <<: *default
    image: temporalio/auto-setup:1.18.5
    container_name: arjuna-temporal
    depends_on:
      - postgres
      - elasticsearch
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=postgresuser
      - POSTGRES_PWD=postgrespassword
      - POSTGRES_SEEDS=postgres
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - PROMETHEUS_ENDPOINT=0.0.0.0:9091
    ports:
      - 7233:7233
      - 9091:9091
    profiles:
      - infra

  temporal-admin-tools:
    <<: *default
    image: temporalio/admin-tools:1.18.5
    container_name: arjuna-temporal-admin-tools
    depends_on:
      temporal:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "tctl cluster health"]
      interval: 10s
      timeout: 60s
      retries: 10
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    stdin_open: true
    tty: true
    profiles:
      - infra

  temporal-ui:
    <<: *default
    image: temporalio/ui:2.8.3
    container_name: arjuna-temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
      - TEMPORAL_NOTIFY_ON_NEW_VERSION=false
    ports:
      - 8081:8080
    profiles:
      - infra

  jaeger:
    <<: *default
    image: jaegertracing/all-in-one:1.41
    container_name: arjuna-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411
    profiles:
      - infra

  otel-collector:
    <<: *default
    image: otel/opentelemetry-collector:0.71.0
    container_name: arjuna-otel-collector
    depends_on:
      - jaeger
    command: [ "--config", "/etc/otel-config.yml" ]
    ports:
      - 4317:4317
      - 1888:1888
      - 13133:13133
      - 55679:55679
    volumes:
      - ./infrastructure/opentelemetry/config/otel-collector.yml:/etc/otel-config.yml
    profiles:
      - infra

  loki:
    <<: *default
    image: grafana/loki:2.7.0
    container_name: arjuna-loki
    command: ["-config.file=/etc/loki/local-config.yml"]
    ports:
      - 3001:3001
    volumes:
      - ./infrastructure/loki/config/loki.yml:/etc/loki/local-config.yml
    profiles:
      - infra

  promtail:
    <<: *default
    image: grafana/promtail:2.7.0
    container_name: arjuna-promtail
    volumes:
      - /var/lib/docker/:/var/lib/docker:ro
      - ./infrastructure/promtail/config/promtail.yaml:/etc/promtail/promtail.yml
    command: -config.file=/etc/promtail/promtail.yml
    profiles:
      - infra

  tempo:
    <<: *default
    image: grafana/tempo:main-0c1eb27
    container_name: arjuna-tempo
    command: ["-config.file=/etc/tempo.yml"]
    volumes:
      - ./infrastructure/tempo/config/tempo.yml:/etc/tempo.yml
    ports:
      - 3100:3100
    profiles:
      - infra

  prometheus:
    <<: *default
    image: prom/prometheus:v2.42.0
    container_name: arjuna-prometheus
    ports:
      - 9090:9090
    volumes:
      - ./infrastructure/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
    profiles:
      - infra

  grafana:
    <<: *default
    image: grafana/grafana:9.4.1
    container_name: arjuna-grafana
    depends_on:
      - prometheus
    ports:
      - 3500:3000
    volumes:
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    profiles:
      - infra

  blueprint:
    <<: *default
    image: indrasaputra/arjuna-blueprint-server:latest
    container_name: arjuna-blueprint-server
    ports:
      - 4000:80
    profiles:
      - service

  gateway:
    <<: *arjuna-backend-default
    image: indrasaputra/arjuna-gateway-server:latest
    container_name: arjuna-gateway-server
    depends_on:
      - postgres
    ports:
      - 8000:8000
    environment:
      - SERVICE_NAME=gateway-server
      - APP_ENV=development
      - PORT=8000
      - USER_SERVICE_ADDRESS=user-server:8001
      - AUTH_SERVICE_ADDRESS=auth-server:8002
      - OPENTELEMETRY_COLLECTOR_ADDRESS=otel-collector:4317
    profiles:
      - service

  auth-server:
    <<: *arjuna-backend-default
    image: indrasaputra/arjuna-auth-server:latest
    container_name: arjuna-auth-server
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - 8002:8002
      - 7002:7002
    environment:
      - SERVICE_NAME=auth-server
      - APP_ENV=development
      - PORT=8002
      - PROMETHEUS_PORT=7002
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgrespassword
      - POSTGRES_NAME=arjuna_auth
      - POSTGRES_MAX_OPEN_CONNS=50
      - POSTGRES_MAX_CONN_LIFETIME=10m
      - POSTGRES_MAX_IDLE_LIFETIME=5m
      - POSTGRES_SSL_MODE=disable
      - OPENTELEMETRY_COLLECTOR_ADDRESS=otel-collector:4317
      - TOKEN_SECRET_KEY=arjuna-secret-key
      - TOKEN_EXPIRY_TIME_IN_MINUTE=30
      - SKIPPED_AUTH=/api.v1.AuthService/Login,/api.v1.AuthService/RegisterAccount
    profiles:
      - service

  user-server:
    <<: *arjuna-backend-default
    image: indrasaputra/arjuna-user-server:latest
    container_name: arjuna-user-server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_started
    ports:
      - 8001:8001
      - 7001:7001
    environment:
      - SERVICE_NAME=user-server
      - APP_ENV=development
      - PORT=8001
      - PROMETHEUS_PORT=7001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgrespassword
      - POSTGRES_NAME=arjuna_user
      - POSTGRES_MAX_OPEN_CONNS=50
      - POSTGRES_MAX_CONN_LIFETIME=10m
      - POSTGRES_MAX_IDLE_LIFETIME=5m
      - POSTGRES_SSL_MODE=disable
      - TEMPORAL_ADDRESS=temporal:7233
      - OPENTELEMETRY_COLLECTOR_ADDRESS=otel-collector:4317
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - AUTH_SERVICE_HOST=auth-server:8002
      - REDIS_ADDRESS=redis:6379
      - TOKEN_SECRET_KEY=arjuna-secret-key
      - SKIPPED_AUTH=/api.v1.UserCommandService/RegisterUser
    profiles:
      - service

  user-worker:
    <<: *arjuna-backend-default
    image: indrasaputra/arjuna-user-worker:latest
    container_name: arjuna-user-worker
    depends_on:
      postgres:
        condition: service_healthy
      temporal:
        condition: service_started
    environment:
      - SERVICE_NAME=user-worker
      - APP_ENV=development
      - PORT=8001
      - PROMETHEUS_PORT=7001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgrespassword
      - POSTGRES_NAME=arjuna_user
      - POSTGRES_MAX_OPEN_CONNS=50
      - POSTGRES_MAX_CONN_LIFETIME=10m
      - POSTGRES_MAX_IDLE_LIFETIME=5m
      - POSTGRES_SSL_MODE=disable
      - TEMPORAL_ADDRESS=temporal:7233
      - OPENTELEMETRY_COLLECTOR_ADDRESS=otel-collector:4317
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - AUTH_SERVICE_HOST=auth-server:8002
      - REDIS_ADDRESS=redis:6379
      - TOKEN_SECRET_KEY=arjuna-secret-key
    profiles:
      - service

  user-relayer:
    <<: *arjuna-backend-default
    image: indrasaputra/arjuna-user-relayer:latest
    container_name: arjuna-user-relayer
    depends_on:
      postgres:
        condition: service_healthy
      temporal:
        condition: service_started
    environment:
      - SERVICE_NAME=user-relayer
      - APP_ENV=development
      - PORT=8001
      - PROMETHEUS_PORT=7001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgrespassword
      - POSTGRES_NAME=arjuna_user
      - POSTGRES_MAX_OPEN_CONNS=50
      - POSTGRES_MAX_CONN_LIFETIME=10m
      - POSTGRES_MAX_IDLE_LIFETIME=5m
      - POSTGRES_SSL_MODE=disable
      - RELAYER_SLEEP_TIME_MILLISECONDS=1000
      - TEMPORAL_ADDRESS=temporal:7233
      - OPENTELEMETRY_COLLECTOR_ADDRESS=otel-collector:4317
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - AUTH_SERVICE_HOST=auth-server:8002
      - REDIS_ADDRESS=redis:6379
      - TOKEN_SECRET_KEY=arjuna-secret-key
    profiles:
      - service

volumes:
  storage:

networks:
  arjuna:
    name: arjuna
