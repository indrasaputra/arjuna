on:
  workflow_call:
    inputs:
      filters:
        description: The paths to decide if the workflow steps should run.
        required: true
        type: string
      target:
        description: The target project to run the check against.
        required: true
        type: string

jobs:
  download-module:
    name: Download go module
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.target }}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.22.x
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Download module
        run: go mod download
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-module-${{ github.repository }}-${{ inputs.target }}-${{ github.sha }}
          restore-keys: |
            go-module-${{ github.repository }}-${{ inputs.target }}-${{ github.sha }}

  import-lint:
    name: Lint import block
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    container:
      image: indrasaputra/protogen:2024-07-13
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Check import blocks
        run: |
          make format
          make check.import

  security-check:
    name: Semgrep scan
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Scan using Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

  go-code-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Filter paths
        uses: dorny/paths-filter@v2
        id: filter
        with:
          initial-fetch-depth: 10
          filters: ${{ inputs.filters }}
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.22.x
      - name: Lint using golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.59.1
          args: --config=${GITHUB_WORKSPACE}/.golangci.yml
          working-directory: ${{ inputs.target }}

  unit-test-coverage:
    name: Unit test and coverage
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.22.x
      - name: Clone repository
        uses: actions/checkout@v3
      # TODO: move this after lint
      - name: Cache vendor
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-module-${{ github.repository }}-${{ inputs.target }}-${{ github.sha }}
          restore-keys: |
            go-module-${{ github.repository }}-${{ inputs.target }}-${{ github.sha }}
      - name: Run unit test and coverage
        run: make test.cover
      - name: Push coverage result to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
