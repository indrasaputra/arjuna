{
  "swagger": "2.0",
  "info": {
    "title": "User API",
    "version": "1.0.0",
    "contact": {
      "name": "Indra Saputra",
      "url": "https://github.com/indrasaputra"
    },
    "license": {
      "name": "BSD 3-Clause License",
      "url": "https://github.com/indrasaputra/arjuna/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "UserCommandService",
      "description": "This service provides basic command or state-changing use cases to work with user.A user is represented by an email as its unique identifier."
    },
    {
      "name": "UserCommandInternalService",
      "description": "It is the same as UserCommand but should be used internally and not exposed to public."
    },
    {
      "name": "UserQueryService",
      "description": "This service provides basic query or data-retrieving use cases to work with user."
    }
  ],
  "host": "localhost:8000",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/users": {
      "get": {
        "summary": "Get all users.",
        "description": "This endpoint gets all available users in the system.\nCurrently, it only retrieves 10 users at most.",
        "operationId": "GetAllUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAllUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "limit specifies how many users to retrieve in a single call.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/v1/users/register": {
      "post": {
        "summary": "Register a new user.",
        "description": "This endpoint registers a new user.",
        "operationId": "RegisterUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegisterUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "user represents user data.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/v1/users/{id}": {
      "delete": {
        "summary": "Delete a user.",
        "description": "This endpoint deletes a new user.\nIt is expected to be hidden or internal use only.",
        "operationId": "DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id represents user's id.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1DeleteUserResponse": {
      "type": "object",
      "description": "DeleteUserResponse represents response from delete user."
    },
    "v1GetAllUsersResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1User"
          },
          "description": "data represents an array of user data."
        }
      },
      "description": "GetAllUsersResponse represents response from get all users."
    },
    "v1RegisterUserResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1User",
          "description": "data represents user."
        }
      },
      "description": "RegisterUserResponse represents response from register user."
    },
    "v1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id represents a user's id.",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "example": "email@company.com",
          "description": "user's email",
          "pattern": "^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
          "required": [
            "email"
          ]
        },
        "password": {
          "type": "string",
          "format": "string",
          "description": "user's password"
        },
        "name": {
          "type": "string",
          "example": "Zlatan Ibrahimovic",
          "description": "user's name",
          "maxLength": 255,
          "minLength": 1
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "created_at represents when the user was registered.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "updated_at represents when the user was last updated.",
          "readOnly": true
        }
      },
      "description": "User represents a user data.",
      "required": [
        "email"
      ]
    }
  }
}
