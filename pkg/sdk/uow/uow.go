package uow

import (
	"context"

	trmpgx "github.com/avito-tech/go-transaction-manager/drivers/pgxv5/v2"
	trm "github.com/avito-tech/go-transaction-manager/trm/v2"
	"github.com/avito-tech/go-transaction-manager/trm/v2/manager"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
)

// TxManager defines the interface to manage transaction.
// Copied from https://pkg.go.dev/github.com/avito-tech/go-transaction-manager/trm/v2/manager#Manager.
// It is used mostly for testing.
type TxManager interface {
	Do(ctx context.Context, fn func(ctx context.Context) error) (err error)
	DoWithSettings(ctx context.Context, s trm.Settings, fn func(ctx context.Context) error) (err error)
	Init(ctx context.Context, s trm.Settings) (context.Context, manager.Closer, error)
}

// Tr defines an interface for transaction.
type Tr trmpgx.Tr

// TxGetter defines an interface to get transaction from context or use db from param.
// Copied from https://pkg.go.dev/github.com/avito-tech/go-transaction-manager/drivers/pgxv5/v2#CtxGetter.
// It is used mostly for testing.
type TxGetter interface {
	DefaultTrOrDB(ctx context.Context, db trmpgx.Tr) trmpgx.Tr
}

// TxDB is a transaction version of DB interface generated by sqlc.
type TxDB struct {
	db       Tr
	txGetter TxGetter
}

// NewTxDB creates an instance of TxDB.
func NewTxDB(db Tr, txGetter TxGetter) *TxDB {
	return &TxDB{db: db, txGetter: txGetter}
}

// Exec runs Exec with transaction if needed.
func (d *TxDB) Exec(ctx context.Context, sql string, args ...interface{}) (pgconn.CommandTag, error) {
	tx := d.txGetter.DefaultTrOrDB(ctx, d.db)
	return tx.Exec(ctx, sql, args...)
}

// Query runs Query with transaction if needed.
func (d *TxDB) Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error) {
	tx := d.txGetter.DefaultTrOrDB(ctx, d.db)
	return tx.Query(ctx, sql, args...)
}

// QueryRow runs QueryRow with transaction if needed.
func (d *TxDB) QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row {
	tx := d.txGetter.DefaultTrOrDB(ctx, d.db)
	return tx.QueryRow(ctx, sql, args...)
}
