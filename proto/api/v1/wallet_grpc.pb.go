// wallet.proto defines service for wallet.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v1/wallet.proto

package apiv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WalletCommandService_CreateWallet_FullMethodName = "/api.v1.WalletCommandService/CreateWallet"
)

// WalletCommandServiceClient is the client API for WalletCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WalletCommandService provides all use cases to work with wallet.
type WalletCommandServiceClient interface {
	// CreateWallet.
	//
	// This endpoint creates a wallet.
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
}

type walletCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletCommandServiceClient(cc grpc.ClientConnInterface) WalletCommandServiceClient {
	return &walletCommandServiceClient{cc}
}

func (c *walletCommandServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, WalletCommandService_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletCommandServiceServer is the server API for WalletCommandService service.
// All implementations must embed UnimplementedWalletCommandServiceServer
// for forward compatibility
//
// WalletCommandService provides all use cases to work with wallet.
type WalletCommandServiceServer interface {
	// CreateWallet.
	//
	// This endpoint creates a wallet.
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	mustEmbedUnimplementedWalletCommandServiceServer()
}

// UnimplementedWalletCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWalletCommandServiceServer struct {
}

func (UnimplementedWalletCommandServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletCommandServiceServer) mustEmbedUnimplementedWalletCommandServiceServer() {}

// UnsafeWalletCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletCommandServiceServer will
// result in compilation errors.
type UnsafeWalletCommandServiceServer interface {
	mustEmbedUnimplementedWalletCommandServiceServer()
}

func RegisterWalletCommandServiceServer(s grpc.ServiceRegistrar, srv WalletCommandServiceServer) {
	s.RegisterService(&WalletCommandService_ServiceDesc, srv)
}

func _WalletCommandService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletCommandServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletCommandService_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletCommandServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletCommandService_ServiceDesc is the grpc.ServiceDesc for WalletCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.WalletCommandService",
	HandlerType: (*WalletCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _WalletCommandService_CreateWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/wallet.proto",
}
